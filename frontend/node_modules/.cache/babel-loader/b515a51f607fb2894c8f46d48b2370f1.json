{"ast":null,"code":"/**\n *  About JSON-RPC...\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */\n// @TODO:\n// - Add the batching API\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\nimport { AbiCoder } from \"../abi/index.js\";\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { TypedDataEncoder } from \"../hash/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport { defineProperties, getBigInt, hexlify, isHexString, toQuantity, toUtf8Bytes, makeError, assert, assertArgument, FetchRequest, resolveProperties } from \"../utils/index.js\";\nimport { AbstractProvider, UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\nimport { Network } from \"./network.js\";\nimport { FilterIdEventSubscriber, FilterIdPendingSubscriber } from \"./subscriber-filterid.js\";\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy(value) {\n  if (value == null || Primitive.indexOf(typeof value) >= 0) {\n    return value;\n  }\n  // Keep any Addressable\n  if (typeof value.getAddress === \"function\") {\n    return value;\n  }\n  if (Array.isArray(value)) {\n    return value.map(deepCopy);\n  }\n  if (typeof value === \"object\") {\n    return Object.keys(value).reduce((accum, key) => {\n      accum[key] = value[key];\n      return accum;\n    }, {});\n  }\n  throw new Error(`should not happen: ${value} (${typeof value})`);\n}\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\nfunction isPollable(value) {\n  return value && typeof value.pollingInterval === \"number\";\n}\nconst defaultOptions = {\n  polling: false,\n  staticNetwork: null,\n  batchStallTime: 10,\n  batchMaxSize: 1 << 20,\n  batchMaxCount: 100 // 100 requests\n};\n// @TODO: Unchecked Signers\nexport class JsonRpcSigner extends AbstractSigner {\n  address;\n  constructor(provider, address) {\n    super(provider);\n    address = getAddress(address);\n    defineProperties(this, {\n      address\n    });\n  }\n  connect(provider) {\n    assert(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"signer.connect\"\n    });\n  }\n  async getAddress() {\n    return this.address;\n  }\n  // JSON-RPC will automatially fill in nonce, etc. so we just check from\n  async populateTransaction(tx) {\n    return await this.populateCall(tx);\n  }\n  // Returns just the hash of the transaction after sent, which is what\n  // the bare JSON-RPC API does;\n  async sendUncheckedTransaction(_tx) {\n    const tx = deepCopy(_tx);\n    const promises = [];\n    // Make sure the from matches the sender\n    if (tx.from) {\n      const _from = tx.from;\n      promises.push((async () => {\n        const from = await resolveAddress(_from, this.provider);\n        assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n        tx.from = from;\n      })());\n    } else {\n      tx.from = this.address;\n    }\n    // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n    if (tx.gasLimit == null) {\n      promises.push((async () => {\n        tx.gasLimit = await this.provider.estimateGas({\n          ...tx,\n          from: this.address\n        });\n      })());\n    }\n    // The address may be an ENS name or Addressable\n    if (tx.to != null) {\n      const _to = tx.to;\n      promises.push((async () => {\n        tx.to = await resolveAddress(_to, this.provider);\n      })());\n    }\n    // Wait until all of our properties are filled in\n    if (promises.length) {\n      await Promise.all(promises);\n    }\n    const hexTx = this.provider.getRpcTransaction(tx);\n    return this.provider.send(\"eth_sendTransaction\", [hexTx]);\n  }\n  async sendTransaction(tx) {\n    // This cannot be mined any earlier than any recent block\n    const blockNumber = await this.provider.getBlockNumber();\n    // Send the transaction\n    const hash = await this.sendUncheckedTransaction(tx);\n    // Unfortunately, JSON-RPC only provides and opaque transaction hash\n    // for a response, and we need the actual transaction, so we poll\n    // for it; it should show up very quickly\n    return await new Promise((resolve, reject) => {\n      const timeouts = [1000, 100];\n      const checkTx = async () => {\n        // Try getting the transaction\n        const tx = await this.provider.getTransaction(hash);\n        if (tx != null) {\n          resolve(tx.replaceableTransaction(blockNumber));\n          return;\n        }\n        // Wait another 4 seconds\n        this.provider._setTimeout(() => {\n          checkTx();\n        }, timeouts.pop() || 4000);\n      };\n      checkTx();\n    });\n  }\n  async signTransaction(_tx) {\n    const tx = deepCopy(_tx);\n    // Make sure the from matches the sender\n    if (tx.from) {\n      const from = await resolveAddress(tx.from, this.provider);\n      assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n      tx.from = from;\n    } else {\n      tx.from = this.address;\n    }\n    const hexTx = this.provider.getRpcTransaction(tx);\n    return await this.provider.send(\"eth_signTransaction\", [hexTx]);\n  }\n  async signMessage(_message) {\n    const message = typeof _message === \"string\" ? toUtf8Bytes(_message) : _message;\n    return await this.provider.send(\"personal_sign\", [hexlify(message), this.address.toLowerCase()]);\n  }\n  async signTypedData(domain, types, _value) {\n    const value = deepCopy(_value);\n    // Populate any ENS names (in-place)\n    const populated = await TypedDataEncoder.resolveNames(domain, types, value, async value => {\n      const address = await resolveAddress(value);\n      assertArgument(address != null, \"TypedData does not support null address\", \"value\", value);\n      return address;\n    });\n    return await this.provider.send(\"eth_signTypedData_v4\", [this.address.toLowerCase(), JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n  }\n  async unlock(password) {\n    return this.provider.send(\"personal_unlockAccount\", [this.address.toLowerCase(), password, null]);\n  }\n  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n  async _legacySignMessage(_message) {\n    const message = typeof _message === \"string\" ? toUtf8Bytes(_message) : _message;\n    return await this.provider.send(\"eth_sign\", [this.address.toLowerCase(), hexlify(message)]);\n  }\n}\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */\nexport class JsonRpcApiProvider extends AbstractProvider {\n  #options;\n  // The next ID to use for the JSON-RPC ID field\n  #nextId;\n  // Payloads are queued and triggered in batches using the drainTimer\n  #payloads;\n  #drainTimer;\n  #notReady;\n  #network;\n  #scheduleDrain() {\n    if (this.#drainTimer) {\n      return;\n    }\n    // If we aren't using batching, no hard in sending it immeidately\n    const stallTime = this._getOption(\"batchMaxCount\") === 1 ? 0 : this._getOption(\"batchStallTime\");\n    this.#drainTimer = setTimeout(() => {\n      this.#drainTimer = null;\n      const payloads = this.#payloads;\n      this.#payloads = [];\n      while (payloads.length) {\n        // Create payload batches that satisfy our batch constraints\n        const batch = [payloads.shift()];\n        while (payloads.length) {\n          if (batch.length === this.#options.batchMaxCount) {\n            break;\n          }\n          batch.push(payloads.shift());\n          const bytes = JSON.stringify(batch.map(p => p.payload));\n          if (bytes.length > this.#options.batchMaxSize) {\n            payloads.unshift(batch.pop());\n            break;\n          }\n        }\n        // Process the result to each payload\n        (async () => {\n          const payload = batch.length === 1 ? batch[0].payload : batch.map(p => p.payload);\n          this.emit(\"debug\", {\n            action: \"sendRpcPayload\",\n            payload\n          });\n          try {\n            const result = await this._send(payload);\n            this.emit(\"debug\", {\n              action: \"receiveRpcResult\",\n              result\n            });\n            // Process results in batch order\n            for (const {\n              resolve,\n              reject,\n              payload\n            } of batch) {\n              // Find the matching result\n              const resp = result.filter(r => r.id === payload.id)[0];\n              // No result; the node failed us in unexpected ways\n              if (resp == null) {\n                return reject(new Error(\"@TODO: no result\"));\n              }\n              // The response is an error\n              if (\"error\" in resp) {\n                return reject(this.getRpcError(payload, resp));\n              }\n              // All good; send the result\n              resolve(resp.result);\n            }\n          } catch (error) {\n            this.emit(\"debug\", {\n              action: \"receiveRpcError\",\n              error\n            });\n            for (const {\n              reject\n            } of batch) {\n              // @TODO: augment the error with the payload\n              reject(error);\n            }\n          }\n        })();\n      }\n    }, stallTime);\n  }\n  constructor(network, options) {\n    super(network);\n    this.#nextId = 1;\n    this.#options = Object.assign({}, defaultOptions, options || {});\n    this.#payloads = [];\n    this.#drainTimer = null;\n    this.#network = null;\n    {\n      let resolve = null;\n      const promise = new Promise(_resolve => {\n        resolve = _resolve;\n      });\n      this.#notReady = {\n        promise,\n        resolve\n      };\n    }\n    // This could be relaxed in the future to just check equivalent networks\n    const staticNetwork = this._getOption(\"staticNetwork\");\n    if (staticNetwork) {\n      assertArgument(staticNetwork === network, \"staticNetwork MUST match network object\", \"options\", options);\n      this.#network = staticNetwork;\n    }\n  }\n  /**\n   *  Returns the value associated with the option %%key%%.\n   *\n   *  Sub-classes can use this to inquire about configuration options.\n   */\n  _getOption(key) {\n    return this.#options[key];\n  }\n  /**\n   *  Gets the [[Network]] this provider has committed to. On each call, the network\n   *  is detected, and if it has changed, the call will reject.\n   */\n  get _network() {\n    assert(this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\n    return this.#network;\n  }\n  /*\n   {\n      assert(false, \"sub-classes must override _send\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"jsonRpcApiProvider._send\"\n      });\n  }\n  */\n  /**\n   *  Resolves to the non-normalized value by performing %%req%%.\n   *\n   *  Sub-classes may override this to modify behavior of actions,\n   *  and should generally call ``super._perform`` as a fallback.\n   */\n  async _perform(req) {\n    // Legacy networks do not like the type field being passed along (which\n    // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n    if (req.method === \"call\" || req.method === \"estimateGas\") {\n      let tx = req.transaction;\n      if (tx && tx.type != null && getBigInt(tx.type)) {\n        // If there are no EIP-1559 properties, it might be non-EIP-a559\n        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n          const feeData = await this.getFeeData();\n          if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n            // Network doesn't know about EIP-1559 (and hence type)\n            req = Object.assign({}, req, {\n              transaction: Object.assign({}, tx, {\n                type: undefined\n              })\n            });\n          }\n        }\n      }\n    }\n    const request = this.getRpcRequest(req);\n    if (request != null) {\n      return await this.send(request.method, request.args);\n    }\n    return super._perform(req);\n  }\n  /**\n   *  Sub-classes may override this; it detects the *actual* network that\n   *  we are **currently** connected to.\n   *\n   *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n   *  _send primitive must be used instead.\n   */\n  async _detectNetwork() {\n    const network = this._getOption(\"staticNetwork\");\n    if (network) {\n      return network;\n    }\n    // If we are ready, use ``send``, which enabled requests to be batched\n    if (this.ready) {\n      return Network.from(getBigInt(await this.send(\"eth_chainId\", [])));\n    }\n    // We are not ready yet; use the primitive _send\n    const payload = {\n      id: this.#nextId++,\n      method: \"eth_chainId\",\n      params: [],\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"sendRpcPayload\",\n      payload\n    });\n    let result;\n    try {\n      result = (await this._send(payload))[0];\n    } catch (error) {\n      this.emit(\"debug\", {\n        action: \"receiveRpcError\",\n        error\n      });\n      throw error;\n    }\n    this.emit(\"debug\", {\n      action: \"receiveRpcResult\",\n      result\n    });\n    if (\"result\" in result) {\n      return Network.from(getBigInt(result.result));\n    }\n    throw this.getRpcError(payload, result);\n  }\n  /**\n   *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n   *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n   *  ``super._start()`` **MUST** be called.\n   *\n   *  Calling it multiple times is safe and has no effect.\n   */\n  _start() {\n    if (this.#notReady == null || this.#notReady.resolve == null) {\n      return;\n    }\n    this.#notReady.resolve();\n    this.#notReady = null;\n    (async () => {\n      // Bootstrap the network\n      while (this.#network == null) {\n        try {\n          this.#network = await this._detectNetwork();\n        } catch (error) {\n          console.log(\"JsonRpcProvider failed to startup; retry in 1s\");\n          await stall(1000);\n        }\n      }\n      // Start dispatching requests\n      this.#scheduleDrain();\n    })();\n  }\n  /**\n   *  Resolves once the [[_start]] has been called. This can be used in\n   *  sub-classes to defer sending data until the connection has been\n   *  established.\n   */\n  async _waitUntilReady() {\n    if (this.#notReady == null) {\n      return;\n    }\n    return await this.#notReady.promise;\n  }\n  /**\n   *  Return a Subscriber that will manage the %%sub%%.\n   *\n   *  Sub-classes may override this to modify the behavior of\n   *  subscription management.\n   */\n  _getSubscriber(sub) {\n    // Pending Filters aren't availble via polling\n    if (sub.type === \"pending\") {\n      return new FilterIdPendingSubscriber(this);\n    }\n    if (sub.type === \"event\") {\n      if (this._getOption(\"polling\")) {\n        return new PollingEventSubscriber(this, sub.filter);\n      }\n      return new FilterIdEventSubscriber(this, sub.filter);\n    }\n    // Orphaned Logs are handled automatically, by the filter, since\n    // logs with removed are emitted by it\n    if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n      return new UnmanagedSubscriber(\"orphan\");\n    }\n    return super._getSubscriber(sub);\n  }\n  /**\n   *  Returns true only if the [[_start]] has been called.\n   */\n  get ready() {\n    return this.#notReady == null;\n  }\n  /**\n   *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n   *  which has all values hexlified and any numeric values converted\n   *  to Quantity values.\n   */\n  getRpcTransaction(tx) {\n    const result = {};\n    // JSON-RPC now requires numeric values to be \"quantity\" values\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      let dstKey = key;\n      if (key === \"gasLimit\") {\n        dstKey = \"gas\";\n      }\n      result[dstKey] = toQuantity(getBigInt(tx[key], `tx.${key}`));\n    });\n    // Make sure addresses and data are lowercase\n    [\"from\", \"to\", \"data\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      result[key] = hexlify(tx[key]);\n    });\n    // Normalize the access list object\n    if (tx.accessList) {\n      result[\"accessList\"] = accessListify(tx.accessList);\n    }\n    return result;\n  }\n  /**\n   *  Returns the request method and arguments required to perform\n   *  %%req%%.\n   */\n  getRpcRequest(req) {\n    switch (req.method) {\n      case \"chainId\":\n        return {\n          method: \"eth_chainId\",\n          args: []\n        };\n      case \"getBlockNumber\":\n        return {\n          method: \"eth_blockNumber\",\n          args: []\n        };\n      case \"getGasPrice\":\n        return {\n          method: \"eth_gasPrice\",\n          args: []\n        };\n      case \"getBalance\":\n        return {\n          method: \"eth_getBalance\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getTransactionCount\":\n        return {\n          method: \"eth_getTransactionCount\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getCode\":\n        return {\n          method: \"eth_getCode\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getStorage\":\n        return {\n          method: \"eth_getStorageAt\",\n          args: [getLowerCase(req.address), \"0x\" + req.position.toString(16), req.blockTag]\n        };\n      case \"broadcastTransaction\":\n        return {\n          method: \"eth_sendRawTransaction\",\n          args: [req.signedTransaction]\n        };\n      case \"getBlock\":\n        if (\"blockTag\" in req) {\n          return {\n            method: \"eth_getBlockByNumber\",\n            args: [req.blockTag, !!req.includeTransactions]\n          };\n        } else if (\"blockHash\" in req) {\n          return {\n            method: \"eth_getBlockByHash\",\n            args: [req.blockHash, !!req.includeTransactions]\n          };\n        }\n        break;\n      case \"getTransaction\":\n        return {\n          method: \"eth_getTransactionByHash\",\n          args: [req.hash]\n        };\n      case \"getTransactionReceipt\":\n        return {\n          method: \"eth_getTransactionReceipt\",\n          args: [req.hash]\n        };\n      case \"call\":\n        return {\n          method: \"eth_call\",\n          args: [this.getRpcTransaction(req.transaction), req.blockTag]\n        };\n      case \"estimateGas\":\n        {\n          return {\n            method: \"eth_estimateGas\",\n            args: [this.getRpcTransaction(req.transaction)]\n          };\n        }\n      case \"getLogs\":\n        if (req.filter && req.filter.address != null) {\n          if (Array.isArray(req.filter.address)) {\n            req.filter.address = req.filter.address.map(getLowerCase);\n          } else {\n            req.filter.address = getLowerCase(req.filter.address);\n          }\n        }\n        return {\n          method: \"eth_getLogs\",\n          args: [req.filter]\n        };\n    }\n    return null;\n  }\n  /**\n   *  Returns an ethers-style Error for the given JSON-RPC error\n   *  %%payload%%, coalescing the various strings and error shapes\n   *  that different nodes return, coercing them into a machine-readable\n   *  standardized error.\n   */\n  getRpcError(payload, _error) {\n    const {\n      method\n    } = payload;\n    const {\n      error\n    } = _error;\n    if (method === \"eth_estimateGas\" && error.message) {\n      const msg = error.message;\n      if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n        return makeError(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n          transaction: payload.params[0]\n        });\n      }\n    }\n    if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n      const result = spelunkData(error);\n      const e = AbiCoder.getBuiltinCallException(method === \"eth_call\" ? \"call\" : \"estimateGas\", payload.params[0], result ? result.data : null);\n      e.info = {\n        error,\n        payload\n      };\n      return e;\n    }\n    // Only estimateGas and call can return arbitrary contract-defined text, so now we\n    // we can process text safely.\n    const message = JSON.stringify(spelunkMessage(error));\n    if (typeof error.message === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n      const actionMap = {\n        eth_sign: \"signMessage\",\n        personal_sign: \"signMessage\",\n        eth_signTypedData_v4: \"signTypedData\",\n        eth_signTransaction: \"signTransaction\",\n        eth_sendTransaction: \"sendTransaction\",\n        eth_requestAccounts: \"requestAccess\",\n        wallet_requestAccounts: \"requestAccess\"\n      };\n      return makeError(`user rejected action`, \"ACTION_REJECTED\", {\n        action: actionMap[method] || \"unknown\",\n        reason: \"rejected\",\n        info: {\n          payload,\n          error\n        }\n      });\n    }\n    if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n      const transaction = payload.params[0];\n      if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n        return makeError(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n          transaction,\n          info: {\n            error\n          }\n        });\n      }\n      if (message.match(/nonce/i) && message.match(/too low/i)) {\n        return makeError(\"nonce has already been used\", \"NONCE_EXPIRED\", {\n          transaction\n        });\n      }\n      // \"replacement transaction underpriced\"\n      if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n        return makeError(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n          transaction\n        });\n      }\n      if (message.match(/only replay-protected/i)) {\n        return makeError(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n          operation: method,\n          info: {\n            transaction\n          }\n        });\n      }\n    }\n    if (message.match(/the method .* does not exist/i)) {\n      return makeError(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n        operation: payload.method,\n        info: {\n          error\n        }\n      });\n    }\n    return makeError(\"could not coalesce error\", \"UNKNOWN_ERROR\", {\n      error\n    });\n  }\n  /**\n   *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n   *  over the underlying channel. This can be used to call methods\n   *  on the backend that do not have a high-level API within the Provider\n   *  API.\n   *\n   *  This method queues requests according to the batch constraints\n   *  in the options, assigns the request a unique ID.\n   *\n   *  **Do NOT override** this method in sub-classes; instead\n   *  override [[_send]] or force the options values in the\n   *  call to the constructor to modify this method's behavior.\n   */\n  send(method, params) {\n    // @TODO: cache chainId?? purge on switch_networks\n    const id = this.#nextId++;\n    const promise = new Promise((resolve, reject) => {\n      this.#payloads.push({\n        resolve,\n        reject,\n        payload: {\n          method,\n          params,\n          id,\n          jsonrpc: \"2.0\"\n        }\n      });\n    });\n    // If there is not a pending drainTimer, set one\n    this.#scheduleDrain();\n    return promise;\n  }\n  /**\n   *  Resolves to the [[Signer]] account for  %%address%% managed by\n   *  the client.\n   *\n   *  If the %%address%% is a number, it is used as an index in the\n   *  the accounts from [[listAccounts]].\n   *\n   *  This can only be used on clients which manage accounts (such as\n   *  Geth with imported account or MetaMask).\n   *\n   *  Throws if the account doesn't exist.\n   */\n  async getSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n    const accountsPromise = this.send(\"eth_accounts\", []);\n    // Account index\n    if (typeof address === \"number\") {\n      const accounts = await accountsPromise;\n      if (address >= accounts.length) {\n        throw new Error(\"no such account\");\n      }\n      return new JsonRpcSigner(this, accounts[address]);\n    }\n    const {\n      accounts\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      accounts: accountsPromise\n    });\n    // Account address\n    address = getAddress(address);\n    for (const account of accounts) {\n      if (getAddress(account) === address) {\n        return new JsonRpcSigner(this, address);\n      }\n    }\n    throw new Error(\"invalid account\");\n  }\n  async listAccounts() {\n    const accounts = await this.send(\"eth_accounts\", []);\n    return accounts.map(a => new JsonRpcSigner(this, a));\n  }\n}\nexport class JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n  #pollingInterval;\n  constructor(network, options) {\n    super(network, options);\n    this.#pollingInterval = 4000;\n  }\n  _getSubscriber(sub) {\n    const subscriber = super._getSubscriber(sub);\n    if (isPollable(subscriber)) {\n      subscriber.pollingInterval = this.#pollingInterval;\n    }\n    return subscriber;\n  }\n  /**\n   *  The polling interval (default: 4000 ms)\n   */\n  get pollingInterval() {\n    return this.#pollingInterval;\n  }\n  set pollingInterval(value) {\n    if (!Number.isInteger(value) || value < 0) {\n      throw new Error(\"invalid interval\");\n    }\n    this.#pollingInterval = value;\n    this._forEachSubscriber(sub => {\n      if (isPollable(sub)) {\n        sub.pollingInterval = this.#pollingInterval;\n      }\n    });\n  }\n}\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */\nexport class JsonRpcProvider extends JsonRpcApiPollingProvider {\n  #connect;\n  constructor(url, network, options) {\n    if (url == null) {\n      url = \"http:/\\/localhost:8545\";\n    }\n    super(network, options);\n    if (typeof url === \"string\") {\n      this.#connect = new FetchRequest(url);\n    } else {\n      this.#connect = url.clone();\n    }\n  }\n  _getConnection() {\n    return this.#connect.clone();\n  }\n  async send(method, params) {\n    // All requests are over HTTP, so we can just start handling requests\n    // We do this here rather than the constructor so that we don't send any\n    // requests to the network (i.e. eth_chainId) until we absolutely have to.\n    await this._start();\n    return await super.send(method, params);\n  }\n  async _send(payload) {\n    // Configure a POST connection for the requested method\n    const request = this._getConnection();\n    request.body = JSON.stringify(payload);\n    request.setHeader(\"content-type\", \"application/json\");\n    const response = await request.send();\n    response.assertOk();\n    let resp = response.bodyJson;\n    if (!Array.isArray(resp)) {\n      resp = [resp];\n    }\n    return resp;\n  }\n}\nfunction spelunkData(value) {\n  if (value == null) {\n    return null;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\") && isHexString(value.data)) {\n    return {\n      message: value.message,\n      data: value.data\n    };\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunkData(value[key]);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return spelunkData(JSON.parse(value));\n    } catch (error) {}\n  }\n  return null;\n}\nfunction _spelunkMessage(value, result) {\n  if (value == null) {\n    return;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\") {\n    result.push(value.message);\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      _spelunkMessage(value[key], result);\n    }\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return _spelunkMessage(JSON.parse(value), result);\n    } catch (error) {}\n  }\n}\nfunction spelunkMessage(value) {\n  const result = [];\n  _spelunkMessage(value, result);\n  return result;\n}","map":{"version":3,"names":["AbiCoder","getAddress","resolveAddress","TypedDataEncoder","accessListify","defineProperties","getBigInt","hexlify","isHexString","toQuantity","toUtf8Bytes","makeError","assert","assertArgument","FetchRequest","resolveProperties","AbstractProvider","UnmanagedSubscriber","AbstractSigner","Network","FilterIdEventSubscriber","FilterIdPendingSubscriber","PollingEventSubscriber","Primitive","split","deepCopy","value","indexOf","Array","isArray","map","Object","keys","reduce","accum","key","Error","stall","duration","Promise","resolve","setTimeout","getLowerCase","toLowerCase","isPollable","pollingInterval","defaultOptions","polling","staticNetwork","batchStallTime","batchMaxSize","batchMaxCount","JsonRpcSigner","address","constructor","provider","connect","operation","populateTransaction","tx","populateCall","sendUncheckedTransaction","_tx","promises","from","_from","push","gasLimit","estimateGas","to","_to","length","all","hexTx","getRpcTransaction","send","sendTransaction","blockNumber","getBlockNumber","hash","reject","timeouts","checkTx","getTransaction","replaceableTransaction","_setTimeout","pop","signTransaction","signMessage","_message","message","signTypedData","domain","types","_value","populated","resolveNames","JSON","stringify","getPayload","unlock","password","_legacySignMessage","JsonRpcApiProvider","options","nextId","payloads","drainTimer","notReady","network","scheduleDrain","#scheduleDrain","stallTime","_getOption","batch","shift","bytes","p","payload","unshift","emit","action","result","_send","resp","filter","r","id","getRpcError","error","assign","promise","_resolve","_network","_perform","req","method","transaction","type","maxFeePerGas","maxPriorityFeePerGas","feeData","getFeeData","undefined","request","getRpcRequest","args","_detectNetwork","ready","params","jsonrpc","_start","console","log","_waitUntilReady","_getSubscriber","sub","orphan","forEach","dstKey","accessList","blockTag","position","toString","signedTransaction","includeTransactions","blockHash","_error","msg","match","spelunkData","e","getBuiltinCallException","data","info","spelunkMessage","actionMap","eth_sign","personal_sign","eth_signTypedData_v4","eth_signTransaction","eth_sendTransaction","eth_requestAccounts","wallet_requestAccounts","reason","getSigner","accountsPromise","accounts","getNetwork","account","listAccounts","a","JsonRpcApiPollingProvider","subscriber","Number","isInteger","_forEachSubscriber","JsonRpcProvider","url","clone","_getConnection","body","setHeader","response","assertOk","bodyJson","parse","_spelunkMessage"],"sources":["../../src.ts/providers/provider-jsonrpc.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}